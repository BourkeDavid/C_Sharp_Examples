#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace C_Sharp_Examples
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EmployeeSample")]
	public partial class EmployeesDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertJobDescription(JobDescription instance);
    partial void UpdateJobDescription(JobDescription instance);
    partial void DeleteJobDescription(JobDescription instance);
    #endregion
		
		public EmployeesDatabaseDataContext() : 
				base(global::C_Sharp_Examples.Properties.Settings.Default.EmployeeSampleConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeesDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeesDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeesDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeesDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<JobDescription> JobDescriptions
		{
			get
			{
				return this.GetTable<JobDescription>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private string _Name;
		
		private System.Nullable<int> _JobDescriptionId;
		
		private EntityRef<JobDescription> _JobDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnJobDescriptionIdChanging(System.Nullable<int> value);
    partial void OnJobDescriptionIdChanged();
    #endregion
		
		public Employee()
		{
			this._JobDescription = default(EntityRef<JobDescription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDescriptionId", DbType="Int")]
		public System.Nullable<int> JobDescriptionId
		{
			get
			{
				return this._JobDescriptionId;
			}
			set
			{
				if ((this._JobDescriptionId != value))
				{
					if (this._JobDescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobDescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._JobDescriptionId = value;
					this.SendPropertyChanged("JobDescriptionId");
					this.OnJobDescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDescription_Employee", Storage="_JobDescription", ThisKey="JobDescriptionId", OtherKey="JobDescriptionId", IsForeignKey=true)]
		public JobDescription JobDescription
		{
			get
			{
				return this._JobDescription.Entity;
			}
			set
			{
				JobDescription previousValue = this._JobDescription.Entity;
				if (((previousValue != value) 
							|| (this._JobDescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobDescription.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._JobDescription.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._JobDescriptionId = value.JobDescriptionId;
					}
					else
					{
						this._JobDescriptionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("JobDescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobDescriptions")]
	public partial class JobDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobDescriptionId;
		
		private string _JobDescription1;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobDescriptionIdChanging(int value);
    partial void OnJobDescriptionIdChanged();
    partial void OnJobDescription1Changing(string value);
    partial void OnJobDescription1Changed();
    #endregion
		
		public JobDescription()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDescriptionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobDescriptionId
		{
			get
			{
				return this._JobDescriptionId;
			}
			set
			{
				if ((this._JobDescriptionId != value))
				{
					this.OnJobDescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._JobDescriptionId = value;
					this.SendPropertyChanged("JobDescriptionId");
					this.OnJobDescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="JobDescription", Storage="_JobDescription1", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string JobDescription1
		{
			get
			{
				return this._JobDescription1;
			}
			set
			{
				if ((this._JobDescription1 != value))
				{
					this.OnJobDescription1Changing(value);
					this.SendPropertyChanging();
					this._JobDescription1 = value;
					this.SendPropertyChanged("JobDescription1");
					this.OnJobDescription1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDescription_Employee", Storage="_Employees", ThisKey="JobDescriptionId", OtherKey="JobDescriptionId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.JobDescription = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.JobDescription = null;
		}
	}
}
#pragma warning restore 1591
